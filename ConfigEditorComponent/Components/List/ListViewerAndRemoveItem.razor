@using System.ComponentModel
@using ConfigEditorComponent.Helpers

<span class="config-property-name">
    @PropertyName
    @if (ConfigEditorHelper.isDescriptionAttrDefined(Property))
    {
        string description = ConfigEditorHelper.getDescriptionAttrValue(Property);
        <ToolTip Text="@description" />
    }:
</span>[
@if (PropertyValue == null)
{
    <span class="config-value-content config-value-null">null</span>

}
else
{
    for (int index = 0; index < PropertyValue.Count; index++)
    {
        var item = PropertyValue[index];
        var code = Type.GetTypeCode(item.GetType());
        
        switch (code)
        {
            case TypeCode.String:
                <span class="config-value-content config-value-string">@item</span>
                break;

            case TypeCode.Int32:
            case TypeCode.Int64:
            case TypeCode.Double:
            case TypeCode.Boolean:
                <span class="config-value-content config-value-number">@item</span>
                break;

            default:
                Console.WriteLine($"Primitive View Data Type is not supported with Property : {PropertyName} and type code {code}");
                break;
        }
        int currentIndex = index;
        <span>
            <button type="button" class="config-button" @onclick="@(()=>RemoveItemFromList(currentIndex))">
                <i class="fas fa-times"></i>
            </button>
            ,
        </span>

    }
}
    ]

